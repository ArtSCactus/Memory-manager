// Memory manager.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
class MemoryManager {
	typedef char* VA;// Тип описывающий адрес блока

	struct memory_control_block {
		bool is_available;
		int size;
	};

	/**
	@func	_malloc
	@brief	Выделяет блок памяти определенного размера

	@param	[out] ptr		адресс блока
	@param	[in]  szBlock	размер блока

	@return	код ошибки
	@retval	0	успешное выполнение
	@retval	-1	неверные параметры
	@retval	-2	нехватка памяти
	@retval	1	неизвестная ошибка
 **/
	int _malloc(VA* ptr, size_t szBlock) {
	};



	/**
		@func	_free
		@brief	Удаление блока памяти

		@param	[in] ptr		адресс блока

		@return	код ошибки
		@retval	0	успешное выполнение
		@retval	-1	неверные параметры
		@retval	1	неизвестная ошибка
	 **/
	int _free(VA ptr) {
	};



	/**
		@func	_read
		@brief	Чтение информации из блока памяти

		@param	[in] ptr		адресс блока
		@param	[in] pBuffer	адресс буфера куда копируется инфомация
		@param	[in] szBuffer	размер буфера

		@return	код ошибки
		@retval	0	успешное выполнение
		@retval	-1	неверные параметры
		@retval	-2	доступ за пределы блока
		@retval	1	неизвестная ошибка
	 **/
	int _read(VA ptr, void* pBuffer, size_t szBuffer) {
	
	};



	/**
		@func	_write
		@brief	Запись информации в блок памяти

		@param	[in] ptr		адресс блока
		@param	[in] pBuffer	адресс буфера куда копируется инфомация
		@param	[in] szBuffer	размер буфера

		@return	код ошибки
		@retval	0	успешное выполнение
		@retval	-1	неверные параметры
		@retval	-2	доступ за пределы блока
		@retval	1	неизвестная ошибка
	 **/
	int _write(VA ptr, void* pBuffer, size_t szBuffer) {};



	/**
		@func	_init
		@brief	Инициализация модели менеджера памяти

		@param	[in] n		количество страниц
		@param	[in] szPage	размер страницы

		В варианте 1 и 2 общий объем памяти расчитывается как n*szPage

		@return	код ошибки
		@retval	0	успешное выполнение
		@retval	-1	неверные параметры
		@retval	1	неизвестная ошибка
	 **/
	int _init(int n, int szPage) {};
};

int main()
{
    std::cout << "Oh shit. Here we go again...\n";
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
